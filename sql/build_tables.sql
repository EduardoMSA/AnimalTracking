CREATE TABLE AnimalType (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	`name` VARCHAR(50) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id)
);

CREATE TABLE Species (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	common_name VARCHAR(100) NOT NULL,
	scientific_name VARCHAR(100) NOT NULL,
	animal_type_id INTEGER UNSIGNED NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id),
	FOREIGN KEY (animal_type_id) REFERENCES AnimalType(id) ON DELETE CASCADE
);

CREATE TABLE Gender (
	id TINYINT UNSIGNED AUTO_INCREMENT,
	`name` VARCHAR(50) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id)
);

CREATE TABLE Age (
	id TINYINT UNSIGNED AUTO_INCREMENT,
	`name` VARCHAR(50) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id)
);

CREATE TABLE Destination (
	id TINYINT UNSIGNED AUTO_INCREMENT,
	`name` VARCHAR(50) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id)
);

CREATE TABLE User (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	username VARCHAR(50) NOT NULL,
	`password` VARCHAR(500) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id),
	UNIQUE (username),
	UNIQUE INDEX User_Username_Index (username) USING HASH
);

CREATE TABLE Person (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	`user_id` INTEGER UNSIGNED NOT NULL,
	`name` VARCHAR(50) NOT NULL,
	first_lastname VARCHAR(50) NOT NULL,
	second_lastname VARCHAR(50) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id),
	FOREIGN KEY (`user_id`) REFERENCES User(id) ON DELETE CASCADE,
	FULLTEXT INDEX Person_Name_Index (`name` ASC, first_lastname ASC, second_lastname ASC)
);

CREATE TABLE States (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	`name` VARCHAR(100) NOT NULL,
	initials VARCHAR(50) NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id)
);

CREATE TABLE Municipalities (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	`name` VARCHAR(100) NOT NULL,
	state_id INTEGER UNSIGNED NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id),
	FOREIGN KEY (state_id) REFERENCES States(id) ON DELETE CASCADE
);

CREATE TABLE Locations (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	`name` VARCHAR(100) NOT NULL,
	`type` CHAR(1),
	lat FLOAT,
	lon FLOAT,
	altitude INTEGER,
	municipality_id INTEGER UNSIGNED NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id),
	FOREIGN KEY (municipality_id) REFERENCES Municipalities(id) ON DELETE CASCADE
);

CREATE TABLE SpecimenData (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	folio VARCHAR(20) NOT NULL,
	person_id INTEGER UNSIGNED NOT NULL,
	animalType_id INTEGER UNSIGNED NOT NULL,
	species_id INTEGER UNSIGNED NOT NULL,
	gender_id TINYINT UNSIGNED NOT NULL,
	age_id TINYINT UNSIGNED NOT NULL,
	destination_id TINYINT UNSIGNED NOT NULL,
	`condition` VARCHAR(200),
	weigth FLOAT,
	size FLOAT,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id),
	UNIQUE(folio),
	FOREIGN KEY (person_id) REFERENCES Person(id) ON DELETE CASCADE,
	FOREIGN KEY (animalType_id) REFERENCES AnimalType(id) ON DELETE CASCADE,
	FOREIGN KEY (species_id) REFERENCES Species(id) ON DELETE CASCADE,
	FOREIGN KEY (gender_id) REFERENCES Gender(id) ON DELETE CASCADE,
	FOREIGN KEY (age_id) REFERENCES Age(id) ON DELETE CASCADE,
	FOREIGN KEY (destination_id) REFERENCES Destination(id) ON DELETE CASCADE,
	UNIQUE INDEX SpecimenData_Folio_Index (folio) USING HASH
);

CREATE TABLE ReceptionData (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	specimen_id INTEGER UNSIGNED NOT NULL,
	deliver_person VARCHAR(100),
	reciever_person_id INTEGER UNSIGNED NOT NULL,
	location_id INTEGER UNSIGNED,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id),
	FOREIGN KEY (specimen_id) REFERENCES SpecimenData(id) ON DELETE CASCADE,
	FOREIGN KEY (reciever_person_id) REFERENCES Person(id) ON DELETE CASCADE,
	FOREIGN KEY (location_id) REFERENCES Locations(id) ON DELETE CASCADE,
	FULLTEXT INDEX ReceptionData_DeliverPerson_Index (deliver_person ASC)
);

CREATE TABLE TrackingData (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	specimen_id INTEGER UNSIGNED NOT NULL,
	`date` DATE NOT NULL,
	reviewed BOOLEAN NOT NULL DEFAULT false,
	weigth FLOAT,
	size FLOAT,
	`condition` VARCHAR(200),
	destination_id TINYINT UNSIGNED,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id),
	FOREIGN KEY (specimen_id) REFERENCES SpecimenData(id) ON DELETE CASCADE,
	FOREIGN KEY (destination_id) REFERENCES Destination(id) ON DELETE CASCADE
);

CREATE TABLE FinalDestinationData (
	id INTEGER UNSIGNED AUTO_INCREMENT,
	specimen_id INTEGER UNSIGNED NOT NULL,
	destination_id TINYINT UNSIGNED NOT NULL,
	`condition` VARCHAR(200),
	weigth FLOAT,
	size FLOAT,
	notes VARCHAR(500),
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(id),
	FOREIGN KEY (specimen_id) REFERENCES SpecimenData(id) ON DELETE CASCADE,
	FOREIGN KEY (destination_id) REFERENCES Destination(id) ON DELETE CASCADE
);